Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># skill-tree\n\n本质是通过将简要知识串联起来，形成自己的一个技能树、融会贯通。\n\n[TOC]\n\n> 2024 年初 33k 50W\n> 项目架构 业务技术 架构 项目管理项目实践 缓存设计 消息队列的情景与设计提前准备面试相关回答针对同一个问题，从更深层次的角度去看\n> 面试：全局把控\n> 思维方式，格局，处理事情的态度方法\n>\n> 基础能力设计模式架构能力为什么这样设计，这样设计的好处结合业务思考\n\n学习计划进度表\n\n| 科目               | 进度 |\n| ------------------ | ---- |\n| MySQL              | ✅✅✅  |\n| Redis              | ✅✅✅  |\n| Kafka              | ✅    |\n| 分布式系统         | ✅    |\n| 操作系统           | ✅    |\n| 网络               | ✅    |\n| JUC                | ✅✅✅  |\n| Spring             | ✅✅✅  |\n| JVM                | ✅✅✅  |\n| 云原生             | ⭐️    |\n| 软件设计           |      |\n| 源码解析           |      |\n| 性能优化           | ⭐️    |\n| 算法               | ❎    |\n| Go、面试相关       |      |\n| netty、nginx、es、 |      |\n| Python、大数据     | 24年 |\n\n\n\n# **一.基础学科**\n\n## 操作系统\n进程管理\n\n- 进程&线程&协程\n\n  进程是资源分配的基本单位，而线程是程序执行的基本单位(内存占用和线程切换(内核态)。\n\n  ![在这里插入图片描述](https://img-blog.csdnimg.cn/9d4e3f26e3a741c780fb0d951d49fa9b.png)\n\n  协程的出现是为了降低线程创建的时间和空间成本，以及回归到同步IO的编程模式。\n\n  协程是在用户态下进行切换以及较少的内存占用\n\n- 进程状态\n\n  - 创建、准备、运行、结束、阻塞\n  - 僵尸进程和不可中断进程\n  - 表示进程正在跟硬件交互，为了保护进程数据和硬件的一致性，系统不允许其他进程或中断打断这个进程。进程长时间处于不可中断状态，通常表示系统有 I/O 性能问题。\n  - 僵尸进程表示进程已经退出，但它的父进程还没有回收子进程占用的资源。短暂的僵尸状态我们通常不必理会，但进程长时间处于僵尸状态，就应该注意了，可能有应用程序没有正常处理子进程的退出。\n\n- 进程调度算法\n\n  - 抢占式&非抢占式\n  - Round-Robin算法\n  - 普通进程调度\n  - 先来先服务\n  - 短作业优先 \n  - 最短剩余时间优先\n\n\n- 线程通信方式\n  - 管道、信号、消息队列、socket\n- PCB\n\n\n内存管理\n\n- 内存管理方式\n\n  -  MMU 内存管理单元，存储在CPU中\n\n     -  TLB：MMU中高速缓存\n\n  -  虚拟内存\n\n     虚拟内存是为了保护每个进程所使用的内存空间数据安全。\n\n  - 内存泄漏\n\n     - 对于进程来说，其实是内核提供的虚拟内存，虚拟内存需要通过页表，由系统映射为物理内存。**虚拟内存->页表->物理内存。**\n        进程通过malloc() 申请虚拟内存后，一般不会立即分配物理内存，在首次访问的时候，才通过缺页异常陷入内核中分配内存。\n\n        为了提升性能，引入了cache和buffer，cache是为了提升文件读写性能，而buffer是为了提升磁盘的读写性能。\n        所以整体就是 内存的分配和回收过程。\n\n  - 分段机制\n\n  - 分页机制\n\n  - Swap机制\n\n     -  换出  内存不够时，将内存中的数据写入到磁盘\n     -  换入  内存充足是，将磁盘的数据写入到内存中\n\n  - 段页机制\n\n  - 多级页表和大页\n\n     为了解决页表过多引入多级 \n\n- 局部性原理\n\n  局部性原理分为时间局部性和空间局部性，本质是为了硬件成本与文件读写速度之间的平衡，将高频热点数据存储在高速缓存中。以此提升整体的性能。但是本身也引入了缓存，需要注意缓存命中率与淘汰策略。\n\n- 用户态与内核态、系统调用(中断)\n\n  - 上下文切换\n    - 进程上下文切换（成本高）\n    - 线程上下文切换（私有数据修改）\n    - 中断上下文切换\n  - 中断调用\n    - 硬中断，快速处理中断\n    - 软中断，异步处理上半部分没有完成的工作\n\n- 实模式与保护模式\n\n  实模式：直接操作物理地址，但是不安全、内存不够\n\n  保护模式：缺页中断，通过引入虚拟内存及其缺页机制，CPU 很好地解决了操作系统和软件的配合关系。\n\n- 页面置换算法\n\n  -  随机页面置换算法\n  -  最优页面置换算法\n  -  **FIFO** 算法\n  -  **LRU** 算法\t\t\t\t \t\t\n\n文件系统\n<img width=\"517\" alt=\"image\" src=\"https://github.com/qxlx/skill-tree/assets/36980092/999991f2-d82b-454f-ab45-fcbfa98f30f1\">\n\n- 索引节点（数据的元信息）、目录项（文件系统树结构）\n- VFS 为了支持各种不同的文件系统，Linux 内核在用户进程和文件系统的中间，又引入了一个抽象层，也就是虚拟文件系统 VFS（Virtual File System）。\n- 缓存\n  - 索引节点缓存、目录项缓存、页缓存、标准库缓存\n- 磁盘\n  - 超级块、索引节点区、数据块区\n- 文件系统，通用设块层、设备\n\n- 硬连接、软链接\n- 磁盘调度算法\n- 文件系统有自己的索引、文件缓存、文件数据结构、文件描述符\n\n网络通信\n\n- 套接字 socket\n\n输入输出系统\n\n死锁\n\n- 产生条件\n  - **资源互斥** 一个资源只能被一个线程使用\n  -  **请求与保持条件** 一个线程因阻塞时对以获取的资源不释放 \n  - **不剥夺条件** 线程获取的资源 在未使用之前，不能强行剥夺 \n  - **循环等待条件** 若干线程之间形成一种头尾相接的循环等待资源关系\n- 解决方案、模拟死锁\n  - **粗粒度的锁**\n  - **锁排序法** 按照获取锁的顺序 来依次获取锁\n  - 设置超时时间\n\n性能优化\n\n- 零拷贝 / pageCache / 异步IO、直接IO\n\n  零拷贝是通过减少用户态到内核态数据的拷贝次数，以及提升数据的复制速度，文件从磁盘到内核缓冲区到网络socket缓冲区。\n\n  而pageCache是操作系统为了提升文件到读写，会先从pageCache中查询数据，如果有直接返回，没有再从磁盘读取数据，而写的过程也是一样的，写入pageCache，然后在同步回磁盘，以及提升读写性能。\n\n  异步IO、直接IO是为了解决大文件在零拷贝下的瓶颈，而推荐使用零拷贝。\n  \n- COW (Cop On Write)\n\n- IO多路复用\n\n## 网络协议\n![image](https://github.com/qxlx/skill-tree/assets/36980092/01e38c30-b4ba-4b37-b2cb-f156a220417d)\n\n\n网络基础\n\n- 网络分层结构\n- 常见网络协议\n\n物理层\n\n链路层\n\n- 拓扑结构\n  - 解决环路问题：武林比武 STP\n  - 掌门遇到掌门、同门相遇、掌门与其他帮派小弟相遇、不同门小弟相遇\n\n- MAC\n  - IP是地址，有定位功能；MAC是身份证，无定位功能；\n  - CIDR 判断是不是本地人\n\n- 交换机与VlAN\n  - 交换机有自我学习MAC地址的能力，学习结果是转发表\n  - VLAN：交换机数目多会面临隔离问题，可以通过 VLAN 形成虚拟局域网，从而解决广播问题和安全问题。\n\n- ICMP与PING\n  - ICMP全称Internet Control Message Protocol，就是互联网控制报文协议\n  - 查询报文类型/差错报文类型\n\n- 网关\n  - 静态路由\n  - 转发网关 IP不变 MAC改变\n  - NAT网关 IP和MAC都需要改变\n\n- 路由协议\n  - 配置路由\n  - 静态路由\n  - 动态路由\n    - 距离矢量路由算法  全局存储 \n    - 链路状态路由算法 求最短路径 \n\n  - 动态路由协议\n    - 基于链路状态路由算法的 OSPF\n    - 基于距离矢量路由算法的 BGP\n\n- ARP\n  - 已知 IP 地址，求 MAC 地址的协议。\n  - 1.查看本地ARP表  2.广播ARP请求  3.ARP应答 4.缓存IP-MAC映射\n\n- CRC 循环冗余检测\n  - 通过 XOR 异或的算法，来计算整个包是否在发送的过程中出现了错误\n\n\n传输层\n\n- TCP\n  - 丢包、乱序、重传、拥塞\n    - 顺序问题、丢包问题、流量控制都是通过滑动窗口来解决的。\n    - 拥塞控制是通过拥塞窗口来解决的。（慢启动+拥塞避免  /快重传+快恢复）\n      - 拥塞窗口：这是发送端根据自己估计的网络拥塞程度而设置的窗口值，**是来自发送端的流量控制**。\n      - 防止过多的数据注入网络中，使得网络中的路由器或链路不至过载\n      - 慢启动\n        - 由小到大逐渐增加发送数据量 **发送端的拥塞窗口数值**，每收到一个报文确认，就加一。**指数级增加**\n        - 窗口 cwnd 的增长引起网络拥塞，还需要慢开始门限 ssthresh。\n        - 当 cwnd<ssthresh,使用慢开始算法; 当 cwnd>ssthresh,，使用拥塞避免算法；cwnd=ssthresh,既可用慢开始算法也可用拥塞避免算法。\n        - 无论是慢开始还是拥塞避免，只要发送端发现网络阻塞，就将慢开始门限设为出现拥塞时的发送窗口值的一半，然后拥塞窗口为一，并执行慢开始算法。这样做的目的是迅速减少主机发送到网络中的分组数，使得发生拥塞的路由器有足够时间把队列中积压的分组处理完毕\n      - 拥塞避免\n        - 当网络中的资源供应不足，网络的性能就要明显变坏，整个网络的吞吐量随之负荷的增大而下降，也就是说对资源的需求超过了可用的资源，因为传输数据是需要资源的。\n      - 快重传\n        - 快重传算法规定：发送端只要一连收到三个重复 ack，即可断定有分组丢失，就应该立即重传丢失的报文，而不需要等待为该报文设置的重传计时器超时。\n        - 与慢开始不同，拥塞窗口不设为 1，,而设为慢开始门限+3*mss（mss：最大报文段）。\n\n    - 流量控制和拥塞控制的理解吗？\n      - 流量控制考虑点对点的通信量的控制，也就是客户端和服务端直接数据传输数据量的大小。\n      - 拥塞控制考虑的问题是整个网络，是全局性的考虑。\n\n  - 三次握手\n  - 四次挥手\n    - MSL\n\n  - TCP状态机\n\n- UDP\n  - 格式\n    - 源端口号+目标端口号、UDP长度、UDP校验和\n\n  - 区别：TCP是面向连接的，UDP是无连接的\n  - TCP提供可靠交付，IP层其实没有保证数据的可靠性，TCP传输层保证来传输的数据，无差错、不丢失、不重复，并且按序到达。而UDP不保证可靠传输。并且不按顺序到达\n  - TCP是面向字节流，发送的是一个一个的流，UDP是一个一个的数据报。\n  - TCP具备拥塞控制，也就是会根据丢包以及网络稳定情况进行调整自己发送数据的快慢。UDP其实不管三七二十一，只管发送\n  - TCP是一个有状态服务。会明确记录包又没有到达，UDP是无状态的服务。\n  - 使用场景\n    - 网络情况比较稳定的情况 或者对于丢包场景不敏感的应用\n    - 流媒体的协议、实时游戏、IOT物联网等\n\n- 套接字Socket\n  - 基于TCP、基于UDP\n  - 套接字、多进程、线程、IO多路复用等\n\n\n应用层\n\n- HTTP\n  - 请求行\n  - HTTP2\n\n- HTTPS\n  - 对称加密和非对称加密\n  - https 其实是由两部分组成：http+ssl/tls，也就是在 http 上又加了一层处理加密信息的模块，服务端和客户端的信息传输都会通过 tls 加密，传输的数据都是加密后的数据。加解密过程：\n    1）客户端发起 https 请求（就是用户在浏览器里输入一个 https 网址，然后连接到 server的 443 端口）\n    2）服务端的配置（采用 https 协议的服务器必须要有一塔数字证书，可以自己制作，也可以向组织申请，这套证书就是一对公钥和私钥）。\n    3）传输证书（这个证书就是公钥，只是包含了很多信息）\n    4）客户端解析证书（由客户端 tls 完成，首先验证公钥是否有效，若发现异常，则弹出一个警示框，提示证书存在问题，若无问题，则生成一个随机值，然后用证书对随机值进行加密）\n    5）传输加密信息（这里传输的是加密后的随机值，目的是让服务端得到这个随机值，以后客户端和服务端的通信就可以通过这个随机值来进行加密了）\n    6）服务端解密信息（服务端用私钥解密后得到了客户端传来的随机值，then 把内容通过该值进行对称加密。所谓对称加密就是，将信息和私钥通过某种算法混在一起，这样除非知道私钥，不然无法获取内容，而正好客户端和服务端都知道这个私钥，所以只要加密算法够彪悍，私钥够复杂，数据就够安全）\n    7）传输加密的信息\n    8）客户端解密信息，用随机数来解。\n\n- 流媒体\n- P2P\n- DHCP\n  - Dynamic Host Configuration Protocol，动态主机配置协议）是一个局域网的网络协议，UDP协议，67号端口\n  - 作用就是动态分配IP地址\n  - 工作方式：发现->提供->请求->确认。\n\n\n数据中心\n\n- DNS\n\n  - 域名解析\n\n    - DNS 是一个分布式数据库系统，**存储了域名和 IP 地址的映射关系**。\n\n      **主机向本地域名服务器的查询采用递归查询**：如果本地域名服务器不知道被查询域名的 IP 地址，就会以 DNS 客户的身份向其他根域名服务器继续发出查询请求。\n\n      **本地域名服务器向根域名服务器查询采用迭代查询**：根域名服务器会告知顶级域名服务器的地址，顶级域名服务器给出 IP 地址，或者告知下一步应该向哪个权限域名服务器进行查询。\n\n      - 客户机->Host文件->本地DNS服务区->根DNS服务器->TLD DNS服务器->权威服务器\n      - 改善时延性能并减少在因特网上到处传输的DNS报文数量。\n\n  - 负载均衡\n\n- HTTPDNS\n\n  - HTTP+DNS\n\n- CDN\n\n  - 网络加速\n  - 边缘节点->区域节点->边缘节点\n\n- 数据中心\n\n- VPN\n\n- 移动网络\n\n云计算网络\n\n- PXE \n  - 预启动执行环境（Pre-boot Execution Environment\n\n容器网络\n\n## 数据库\n\nACID、三范式\n\n索引\n\n- 结构：avl b b+树\n- 场景、失效、sql索引\n\n锁\n\n- 共享锁、互斥锁、行锁、间隙锁、主键锁\n\n事物和隔离级别\n\n- ACID、隔离级别、MVCC\n\n存储引擎\n\n- innodb myisam \n\n日志\n\n- redolog、undolog、binlog\n\nSQL优化\n\n- 业务方、表结构设计、sql本身(explain)、索引(男女字段 区分度) 黄金索引三原则  \n- 覆盖索引、减少回表操作、索引下推、索引失效(组合索引) 最左匹配、函数计算\n- 一条SQL执行过程\n  - server层(连接器、缓存层、分析器、优化器、执行器)  存储引擎层\n\n高性能\n\n- 读写分离（主从复制）\n  - 复制方式（带来的数据不一致性） 本质就是快照+操作日志\n    - 同步复制 ：性能不好，不丢失数据\n    - 异步复制：性能好，但是可能丢失数据\n    - 半异步复制：性能稍微好，同步至少一台从库机器。\n  - 复制状态机\n- 表数据复制\n- 分库分表\n  - 数据量大就分表，并发高就分库\n  - 范围分片(容易热点数据)、哈希分片（数据比较均匀）、查表法（性能差）\n\n高可用\n\n\u200B    高可用依赖的是数据复制，数据复制复制就是从一个库备份数据，然后恢复到另一个库中\n\n- 数据备份：\n\n  全量备份 mysqldump -u root -p test > test.sql\n\n  增量备份 binlog\n\n- MySQL HA\n\n  | 方案                              | 高可用 | 可能丢数据 | 性能 |\n  | --------------------------------- | ------ | ---------- | ---- |\n  | 一主一从<br /> 异步复制、手动切换 | 否     | 可控       | 好   |\n  | 一主一从<br />异步复制、自动切换  | 是     | 是         | 好   |\n  | 一主二从 <br />同步复制、自动切换 | 是     | 否         | 差   |\n\n## 数据结构与算法\n\n过遍数 \n\n1.理解题意 2.尽可能所有的解 3.测试 \n\n![image](https://github.com/qxlx/skill-tree/assets/36980092/4685403b-fac4-4190-8081-f379221d4189)\n\n\n时间复杂度\n\n空间复杂度\n\nO(1)、O(N)、O(LogN)、O(N^2)\n\n### 数据结构\n\n数组\n\n链表\n\n- 跳表\n\n栈\n\n- 单调栈\n\n队列\n\n- 优先队列\n\n树\n\n- BST\n- Trie\n- 红黑树\n- B树\n- B+树\n\n哈希表\n\n字符串\n\n- KMP\n\n图\n\n布隆过滤器\n\n堆\n\nLRU Cache\n\n### 算法\n\n排序\n\n- 快排、归并\n\n二分\n\n搜索\n\n- BSF\n- DFS\n- 回遡\n\n贪心算法\n\n动态规划\n\n递归\n\n分治\n\n位运算\n\n数学\n\n双指针\n\n滑动窗口\n\n## 软件工程\n## Linux \n\n目录操作\n\n- cd / pwd / open / mkdir / rmdir / ls \n\n文本操作\n\n- cat、head、tail、less、more、wc -l  查看文件行数\n- vim 、rm -rf、find、\n\n系统管理\n\n- su - 切换用户  \n- sudo 以其他用户身份执行命令\n- kill -9 杀死进程\n\n系统资源查询\n\n- ps、ps -ef、pstree、netstat、df 、top、free\n- IO\n  - iostat -d -x 1  总体IO\n  - pidstat -d 1  进程IO\n  - iotop\n- free\n  - cache是对文件系统的缓存、buffer是对磁盘的缓存。\n- df -i  索引节点磁盘空间\n  - cat /proc/meminfo | grep -E \"SReclaimable|Cached\"  \n  - slabtop \n- 系统上下文切换查看\n  - vmstat 5 //总体监控\n  - pidstat -w 5 //进程监控\n  - pidstat -w -u 1 //-w 参数表示输出进程切换指标，而 -u 参数则表示输出 CPU 使用指标\n  - pidstat -wt 1 // -wt 参数表示输出线程的上下文切换指标\n  - watch -d cat /proc/interrupts //内核中断指标\n  \n- 中断查看\n  - cat /proc/softirqs\n  \n\n进程管理\n\n### CPU\n\n- CPU使用率\n  - 用户CPU\n  - 系统CPU\n  - IOWAIT\n  - 软中断\n  - 硬中断\n  - 窃取CPU\n  - 客户CPU\n- 上下文切换\n  - 自愿上下文切换\n  - 非自愿上下文切换\n- 平均负载\n- CPU缓存命中率\n![image](https://github.com/qxlx/skill-tree/assets/36980092/9a1f076c-2887-460a-9996-7a402a6be081)\n\n![image](https://github.com/qxlx/skill-tree/assets/36980092/7a442828-0c07-4712-94e5-18a70718f3b8)\n\n![image](https://github.com/qxlx/skill-tree/assets/36980092/dda46b7b-34b6-4751-8813-b6e591441e47)\n\n### 内存\n\n- 系统内存指标\n  - 已用内存\n  - 剩余内存\n  - 可用内存\n  - 缺页异常\n    - 主缺页异常\n    - 次缺页异常\n  - 缓存/缓冲区\n    - 使用量\n    - 命中率\n  - Slabs\n- 进程内存指标\n  - 虚拟内存(VSS)\n  - 常驻内存(RSS)\n  - 按比例分配共享内存后的物理内存(PSS)\n  - 独占内存\n  - 共享内存\n  - SWAP内存\n  - 缺页异常\n    - 主缺页异常\n    - 次缺页异常\n- SWAP\n  - 已用空间\n  - 剩余空间\n  - 换入速度\n  - 换出速度\n  ![image](https://github.com/qxlx/skill-tree/assets/36980092/fbf970e9-4639-49a5-94d9-9fb03862070b)\n\n![image](https://github.com/qxlx/skill-tree/assets/36980092/a966d0d5-438c-43be-81ad-2a5aaf0e7a5e)\n\n![image](https://github.com/qxlx/skill-tree/assets/36980092/0daad362-fe90-4446-8745-fbd4cc059d5b)\n\n### IO\n\n- 文件系统\n  - 存储空间容量、使用量以及剩余空间\n  - 索引阶段容量、使用量以及剩余量\n  - 缓存\n    - 页缓存\n    - 目录项缓存\n    - 索引阶段缓存\n    - 具体文件系统缓存(ext4缓存)\n  - IOPS(文件IO)\n  - 响应时间(延迟)\n  - 吞吐量\n- 磁盘\n  - 使用率\n  - IOPS\n  - 吞吐量(B/s)\n  - 响应时间(延迟)\n  - 缓冲区\n  - 相关因素\n    - 读写类型(顺序和随机)\n    - 读写比例\n    - 读写大小\n    - 存储类型(Raid级别、本地、网络)\n\n![image](https://github.com/qxlx/skill-tree/assets/36980092/c1808a9a-d2ff-4226-9d1c-a3b35dc3bb7d)\n\n![image](https://github.com/qxlx/skill-tree/assets/36980092/63e11a70-f82c-416b-b638-c1c7c543814f)\n\n\n![image](https://github.com/qxlx/skill-tree/assets/36980092/3c3e8b1c-b4ac-47f2-936f-23f36f15591b)\n\n\n\n### 网络\n\n## 程序员素养/数学\n\n## 密码学\n\n对称加密\n\n非对称加密\n\n# 二.编程语言\n## Java\n\n集合类\n\n- list\n  - arraylist linkedlist底层原理 time vs 扩容原理  \n- set\n  - hashset \n- map \n  - hashmap 原理 扩容 key是如何计算的 hash冲突 \n  - concurrenthashmap  \t\n  - put() get() resize() 三个过程细化\n  - 7/8之间的区别 具体问题细化一下 \n\n字符串\n\nOOP\n\n关键字\n\n异常\n\nIO\n\n范型\n\n反射\n\n序列化\n\njava8\n\n注解\n\n枚举\n\n## Go\n## python\n## JVM\n\n类加载器/流程\n\n- 1.类加载的整套流程 说一下你的理解。  加载 验证 准备 解析 初始化\n- jvm加载机制  加载过程 加载器  双亲委派模型\n\n- 说一下有哪几个类加载器？ boot /ext / app \n- 双亲委派了解吗？说一下？ 如何判断两个类是否相等\n- 类什么时候进行初始化呢？说一下\n\n字节码技术\n\nJVM对象分配回收策略\n\n- a.对象优先eden  b.大对象直接老年代 c. 动态年龄判定 d.长期老年  e.空间担保\n\n运行时数据区\n\n- JVM为什么要分区？那些区域【是否共享】。新、老分别用什么？7.8区别、内存溢出、内存泄漏区别\n- 创建对象分配方式  \n  - 1.指针碰撞 2.空闲列表  对象内存布局  对象头、实例数据、对其填充\n  - 对象访问方式 1.句柄 2.直接指针   \n  - 对象是否垃圾 1.引用 2.可达性分析\t四种引用\n- 四种引用类型  强软弱虚 \n\n垃圾回收算法\n\n垃圾收集器\n\n- GC收集器【串行、并行、并发】\n\nJMM\n\n- JMM内存模型，先行发生原则\n- 原子性、可见性、有序性   volatile  执行重排序\n\nJVM调优\n\n- xmx xms  年轻代 老年代比例\n- jps ->进程   jstat->信息 jinfo->配置 jmap->内存映像 jhat->堆转储 jstack->堆栈\n\n生产问题排查\n\n- 当一个Java程序响应很慢时如何查找问题、\n- 当一个Java程序频繁FullGC时如何解决问题、\n- 如何查看垃圾回收日志、\n- 当一个Java应用发生OutOfMemory时该如何解决、\n- 如何判断是否出现死锁、\n- 如何判断是否存在内存泄露\n\n**JVM总体流程为->类加载->运行时数据区创建->内存分配回收策略->GC算法->JVM调优**\n\n## 并发编程\n\n**分工、同步、互斥**\n\n并发基础\n\n- 优势、为什么使用\n\n- 进程&线程\n- 线程状态\\生命周期  \n- 线程创建\n\n互斥同步\n\n- synchronized\n  - 锁升级 & mark word \n    - 无锁->偏向锁->轻量级锁->重量级锁\n    - 本质：因避免无效的锁竞争，提升整体的并发性能。\n- ReentrantLock\n  - ReentrantReadWriteLock\n    - 读写锁，锁降级（写锁降级为读锁）\n  - StampedLock\n    - 通过版本进行标记，乐观的读 \n\n线程协作/通信\n\n- join/yield/sleep\n- wait/notify/notifyAll\n- awit/singal/singalAll\n- LockSupport park和unpark\n\n无锁编程\n\n- CAS、ABA\n  - 原子类 \n  \n    - 基本类型原子类\n    - 数组类型原子类\n    - 引用类型原子类\n    - 对象的属性修改原子类\n  \n  - LongAdder原理\n  \n    - CAS+Base+Cell数组分散、空间换时间并分散了热点数据\n    - 应用场景：高并发下的全局计算 \n    - 条件递增，逐步解析\n      \t1.最初无竞争时只更新base；\n      \t2.如果更新base失败后，首次新建一个Cell[]数组\n      \t3.当多个线程竞争同一个Cell比较激烈时，可能就要对Cell[]扩容\n  \n  - |          | AtomicLong                                          | LongAdder                                                    |\n    | -------- | --------------------------------------------------- | ------------------------------------------------------------ |\n    | 线程安全 | 线程安全，有性能损耗                                | 当需要在高并发下有较好的性能表现，且对值的精确度要求不高时，可以使用 |\n    | 性能     | AtomicLong是多个线程针对单个热点值value进行原子操作 | LongAdder是每个线程拥有自己的槽，各个线程一般只对自己槽中的那个值进行CAS操作 |\n    | 精度     | 保证精度，性能代价                                  | 保证性能，精度代价                                           |\n  \n- 原理、(独占、共享)Countdownlatch/semaphore/cyclibarrier\n\nAQS\n\n- AQS源码解析整体流程\n\n  大概的整体流程是这样的，首先，我们创建三个线程A,B,C。线程A先拿到锁，执行任务。 而B、C一直获取不到锁，不能执行任务。被park。等A指向完毕之后，unpark(B);\n\n  lock.lock() 线程A通过CAS 设置上锁。而等线程B去获取锁的时候，CAS获取不到锁。于是进入acquire(1)进入nonfairTryAcquire 再次尝试获取锁，获取不到、直接返回 false。进入addWaiter()将当前节点添加到队列中enq(node)，因为t==null ，所以先创建一个哨兵结点。然后第二次自旋，将当前节点Node(ThreadB)，添加到队列中。调用 acquireQueued() ，拿到当前节点的前置节点。第三次获取，获取不到。进入 park() 等待。等待线程释放锁， unpark() 操作。而在此时，线程A执行任务完毕，进行 lock.unlock() 操作。执行 release(1) ,通过head节点将下一个节点进行 unpark() 操作。而因为线程B被park()了，所以下一次就可以获取到锁，将队列中的哨兵结点进行修改。\n\n工具类\n\n- CountDownLatch\n- CyclicBarrier\n- Semaphore\n- Future\n- CompletableFuture\n  - 异步编程+回调\n\nJMM\n\n- 可见行、有序性、原子性\n- happens-before规则、缓存结构、内存屏障\n\n锁\n\n- 乐观锁\n  - 适用场景：读多写少，会认为数据不会修改，性能高。如果出现修改，在使用CAS或者version进行判断。\n  - 实现方式 version版本和CAS\n- 悲观锁\n  - 适用场景：写多读少，先加锁然后在操作。\n  - syn和lock\n- 公平锁/非公平锁\n- 可重入锁\n- 死锁\n- 写锁/读锁\n- 自旋锁->自适应自旋 锁消除 锁粗化\n- 无锁->偏向锁->轻量级锁->重量级锁 （syn锁升级）\n- 无锁->独占锁->读写锁->邮戳锁  (锁降级)\n\n线程池原理\n\n- 线程池原理，线程池组成，拒绝策略，线程池的工作原理，阻塞队列原理、执行流程\n- Future、Callable 带返回值的执行\n- 阻塞队列\n\nthreadlocal原理\n\n- 原理 ：**线程间变量隔离**\n\n  为了解决线程内数据跨方法类的调用，使用类threadlocal，具体就是thread包含一个threadlocal，而threadlocal内部包含一个threadlocalMap对象。key为this (threadlocal) vaule为对应的值。为了保证引用可以被删一个是程序内部使用弱引用，而是通过程序员remove（）进行维护删除，以及来保证内存泄露。\n\n为什么需要多线程->解决了那些问题-> 线程状态/创建 -> 如何保证数据的一致性(同步 syn lock/互斥/cas)-> 线程间通信(wait/notify threadlocal) ->相关锁机制 syn锁升级 ->线程工具类 aqs -> CAS/ABA -> JMM -> 线程池->线程停止\n\n## 网络编程\n\n同步：调用者需要等待函数的返回结果，才可以继续执行。\n\n异步：调用者无需等待函数的返回结果，可以继续执行，但是一般都是通过回调函数进行通知。\n\n同步vs异步：在于被调用者结果的通知方式，同步无需通知，异步需要进行回调。\n\n阻塞：调用放一直等待结果，当前线程刮起，啥都不能干\n\n非阻塞：调用方可以直接处理别的事情。\n\n阻塞vs非阻塞：在于调用方等待消息时候的行为，是否可以做的别事情\n\nBIO：**BIO的特点就是在IO执行的两个阶段都被block了。**\n\nNIO：**NIO特点是用户进程需要不断的主动询问内核数据准备好了吗？一句话，用轮询替代阻塞！**\n\nIO多路复用 \n![image](https://github.com/qxlx/skill-tree/assets/36980092/22a9b41f-9834-4199-9f7e-f7cf3d417214)\n\n\n信号驱动IO\n\n异步IO\n\n### 异步 I/O 模型\n\n### IO多路复用\n\nselect ： 将文件描述符，从用户态拷贝到内核态，然后内核将处理好的IO写入文件描述符中。select使用的是bitmap，判断fd的位置那个置为1了。O(N) 时间复杂度。\n\n**select方式，既做到了一个线程处理多个客户端连接（文件描述符），又减少了系统调用的开销（多个文件描述符只有一次 select 的系统调用 + N次就绪状态的文件描述符的 read 系统调用**\n\n- 优点，可以避免多次内核态到用户态的fd的拷贝\n- 缺点\n  - bitmap默认是1024 长度，只能处理1024个线程。\n  - rset每次循环都需要重新置为1，不能重复使用\n  - O(N)的时间复杂度\n\npoll\n\n- 优点，解决了只能处理1024个线程的问题。\n- 以及reset不可重用\n\nepoll\n\n- 多路复用快的原因在于，操作系统提供了这样的系统调用，使得原来的 while 循环里多次系统调用，\n\n  **变成了一次系统调用 + 内核层遍历这些文件描述符**。\n\n![image](https://github.com/qxlx/skill-tree/assets/36980092/175c72b0-6fa7-4f68-a64d-7b772a06491e)\n\n\n### C10K\n\nC10K 问题本质上是操作系统处理大并发请求的问题。对于 Web 时代的操作系统而言，对于客户端过来的大量的并发请求，需要创建相应的服务进程或线程。这些进程或线程多了，导致数据拷贝频繁（缓存 I/O、内核将数据拷贝到用户进程空间、阻塞）， 进程 / 线程上下文切换消耗大，从而导致资源被耗尽而崩溃。这就是 C10K 问题的本质。\n\n# 三.开发框架\n## web框架\n## ORM\n## Spring\n\nSpring循环依赖\n\n- 循环依赖是在SpringBean初始化声明周期而产生的问题\n\n  整体流程，其实就是A创建的过程中需要B，所以将A对象自己放入三级缓存中，然后去实例化B。\n  2.B在实例化的时候，发现自己引用了属性A，所以从三级缓存中依此查询，查询一级缓存没有，在查询二级缓存也没有，发现三级缓存有，将A从三级缓存放入二级缓存，并将三级缓存中的A删除。\n  3.B创建完毕之后，将自己放入一级缓存中。然后A接着创建，直接从一级缓存中获取B。A创建完成，将自己放入一级缓存中。\n  整个过程其实就是依赖于如果发现是循环依赖的话，通过将对象提前暴露出来，存储缓存中，并且scope=singleton。所以可以解决这个问题。\n\nBean生命周期\n\n- 动态注册bean的两种方式\n- 实例化\n- 初始化-循环依赖\n- 使用\n- 销魂\n\nAOP原理\n\n- AOP核心概念\n- 创建AOP准备工作\n- JDK动态代理原理\n- Cglib原理\n- AOP动态代理的实现流程\n\n事务原理\n\nIOC原理-刷新方法\n\n- 容器刷新前的准备工作\n- bean工厂的创建\n- 加载BeanDefinition\n- 执行BeanFactoryPostProcessor增强器\n- 进行国际化配置\n- 多播配置和监听器的初始化\n- 实例化bean对象\n- 实例化完成后的处理工作\n\nSpring MVC原理\n\nSpring中设计模式\n\nspringbootstart加载原理\n\n## Spring-cloud\n\nNacos\n\nOpenFeign\n\nGateway\n\nsentinel\n\n# 四.中间件\n## RPC/注册中心\n\nZookeeper\n\n## 网关/代理\n\nNginx\n\n## NoSQL\n## 缓存\n### Redis\n\n![](https://img-blog.csdnimg.cn/a0b5b20bd1224d06814f1410019461c8.png)\n\nRedis基本命令\n\n底层数据结构落地应用\n\n- 数据类型低层源码分析\n- bitMap、HyperLogLog\n\nRedis高性能IO模型\n\n- 单线程模型\n\nIO多路复用\n\n- select、poll、epoll\n\n持久化\n\n- AOF\n- RDB\n\n淘汰策略\n\n- LRU\n\n双写一致性\n\n雪崩、击穿、穿透、预热\n\n- 布隆过滤器\n\n\n分布式锁\n\n- Redission\n\n高可用\n\nRedis数据同步、复制\n\nRedis哨兵机制\n\nRedis哨兵集群\n\nRedis切片集群\n\nredis事务和数据库事务区别\n\n## 消息队列\n\n消息队列作用\n\n- 异步、削峰、解耦、提升写性能\n\n带来的问题\n\n- 消息延迟、系统的复杂度、数据不一致（消息顺序、消息丢失、重复消费、消息挤压、高可用、高性能）\n\n### Kafka\n\nKafka基础架构\n\n- Broker->Topic->Partition->Partition Leader-> Partition Follower \n- 部署架构：单机模式/集群模式\n\n分区机制\n\n- 作用提升负载均衡、可伸缩能力、提升系统处理写性能\n- 策略：随机、轮询、按消息键保序、其他策略\n\n消息挤压如何处理\n\n- 优化性能避免消息挤压\n  - 发送端性能优化\n    - 准备数据、序列化数据、之前的耗时\n    - 发送消息和返回响应网络传输中的耗时\n    - Broker处理消息的时延\n  - 消费端性能优化\n    - 优化消费端程序业务逻辑性能\n    - 水平扩容，增加消费端并发数据。加机器，分区。\n- 发送快了，消费变慢了\n  - 监控、紧急消费端扩容、关闭上游系统功能、错误日志、同一条消息反复消费，拖垮整个系统\n\n消息重复消费\n\n- 生产者幂等、消费者幂等\n\n消息可靠传输\n\n- 发送、存储、消费三个阶段\n\n生产者消费流程\n\nKafka如何实现高性能\n\n- 批量发送、顺序读写提升磁盘IO性能、PageCache加速消息读写、零拷贝技术\n\n**Kafka消费者分区分配和重平衡 ⭐️**\n\n消费者位移\n\n副本机制\n\nKafka多线程消费\n\nKafka高水位和Leader Epoch原理\n\n### RabbitMQ\n\nPulsar\n\n\n\n## 搜索引擎 \n ### ES\n\n## 配置中心\n\n### Apollo\n### XDmond\n## 定时\n\n### XXL-JOB\n\n## 监控/报警/日志\n\n## 链路\n\n### FalCon\n\n# 五.软件设计\n\n![img](https://static001.geekbang.org/resource/image/f3/d3/f3262ef8152517d3b11bfc3f2d2b12d3.png)\n\n## 编程范式\n\n类型系统\n\n范型编程\n\n面向过程\n\n面向对象\n\n- 封装、抽象、继承、多态\n- 接口 VS 抽象类\n\n函数式编程\n\n原型编程\n\n编程本质\n\n## 规范\n\n编码规范\n\n## 重构\n\n- 单元测试\n- 可测试性\n- 大重构\n- 小重构\n\n## 设计原则\n单一职责原则-SRP\n\n- 关于单一职责原则，其核心的思想是：一个类，只做一件事，并把这件事做好，其只有一个引起它变化的原因。单一职责原则可以看作是低耦合、高内聚在面向对象原则上的引申，将职责定义为引起变化的原因，以提高内聚性来减少引起变化的原因。职责过多，可能引起它变化的原因就越多，这将导致职责依赖，相互之间就产生影响，从而极大地损伤其内聚性和耦合度。单一职责，通常意味着单一的功能，因此不要为一个模块实现过多的功能点，以保证实体只有一个引起它变化的原因。\n  - 实际生活：厕所、厨房 只负责一件事情。做饭\n\n开闭原则-OCP\n\n- OCP（Open/Closed Principle）- 开闭原则。关于开发封闭原则，其核心的思想是：模块是可扩展的，而不可修改的。也就是说，对扩展是开放的，而对修改是封闭的。对扩展开放，意味着有新的需求或变化时，可以对现有代码进行扩展，以适应新的情况。对修改封闭，意味着类一旦设计完成，就可以独立完成其工作，而不要对类进行任何修改\n  - 实现：接口、抽象、多态、设计模式等\n  - 可拓展&过度设计。 可拓展&可读性 权衡利弊\n\n里氏替换原则-LSP\n\n- 子类对象可以替换程序中父类对象出现的任何地方，并且保证原有程序逻辑的正确性不被破坏\n- 多态的区别，多态是面向对象编程中一个特性，是用来在具体代码实现的思路，但是里氏替换原则是一种设计原则，是用来指导继承关系中子类该如何设计，保证子类可以替换父类。\n- 子类必须能够替换成它们的基类。即子类应该可以替换任何基类能够出现的地方，并且经过替换以后，代码还能正常工作。另外，不应该在代码中出现 if/else 之类对子类类型进行判断的条件。里氏替换原则 LSP 是使代码符合开闭原则的一个重要保证。正是由于子类型的可替换性才使得父类型的模块在无需修改的情况下就可以扩展。\n\n接口隔离原则-ISP\n\n- 单一职责针对的是模块、类、接口的设计，接口隔离原则更注重于接口的设计，提供了判断接口是否是单一职责的标准。\n\n依赖倒置原则-DIP\n\n- IOC 控制反转，控制是程序流程由原来的程序员控制，到框架控制整体流程，通过框架的预留点进行拓展实现业务需求。控制反转是一种设计思想，指导框架层面的控制。\n- 依赖注入：其实就是不通过new的方式进行创建类。而是通过框架内部机制，直接使用。\n- 依赖注入框架：Spring就负责将对象的创建、初始化、生命周期进行管理，我们只需要按照对应的配置就可以进行使用。\n- 高层不依赖底层细节，高层和底层实现应该依赖于抽象，实现细节依赖于抽象。\n  - Tomcat和应用 互相依赖于servlet规范\n\nDon’t Repeat Yourself (DRY) 原则\n\nKeep It Simple, Stupid (KISS)原则\n\nProgram to an interface, not an implementation\n\nYou Ain’t Gonna Need It (YAGNI) 原则\n\nLaw of Demeter，迪米特法则 (Law of Demeter)原则\n\n## 设计模式\n\n### 创建型\n\n单例模式\n\n工厂模式\n\n建造者模式\n\n原型模式\n\n### 结构型\n\n代理模式\n\n桥接模式\n\n装饰者模式\n\n适配器模式\n\n门面模式\n\n组合模式\n\n享元模式\n\n### 行为型\n\n观察者模式\n\n模板模式\n\n- 模板模式的本质定义一个框架流程，具体的拓展点可以子类进行实现。具体的功能是复用和拓展，复用是指的是，所有的子类可以复用父类中提供的模板方法的代码，拓展是框架通过模板模式提供功能拓展点，用户不修改框架源码的情况下，基于拓展点就可以实现功能。\n\n策略模式\n\n- 解决if、else\n- 定义、创建、使用\n\n职责链模式\n\n- 解决的是一个流程问题，通过不同的过滤器进行处理\n\n迭代器模式\n\n状态模式\n\n访问模式\n\n备忘录模式\n\n命令模式\n\n解释器模式\n\n中介模式\n\n## 源码解析\n\n集合\n\n- ArrsyList\n- LinkedList\n\n- hashmap   ✅\n- concurrenthashmap\n- CopyOnWriteArrayList\n- LinkedHashMap\n\n线程池  ❌\n\n- ExecutorService\n- AbstractExecutorService\n- Executors\n- ScheduledThreadPoolExecutor\n- 阻塞队列\n  - ArrayBlockingQueue\n  - LinkedBlockingQueue\n  - PriorityBlockingQueue\n  - DelayQueue\n  - LinkedTransferQueue\n  - SynchronousQueue\n\nAQS\n\n- Synchroneized\n- ReentrantLock\n  - ReentrantReadWriteLock\n- Condition\n- CountDownLatch\n- CyclicBarrier\n- Semaphore\n- ThreadLocal\n\n异步编程\n\n- CompletableFuture\n\nspring\n\n- Bean加载\n- 事务\n- AOP\n- 三级缓存\n- Spring mvc\n- spting boot\n  - 自动装配\n\nmybaits\n\ntomcat\n\nnetty\n\nDubbo\n\nkafka\n\nZK\n\n## DDD&MVC\n# 六.架构设计\n\n架构设计三原则、简单、合适、演化。**面向复杂度设计**\n![img](https://img-blog.csdnimg.cn/a2e7e82a740c49d79c0d5f1d50cae3d4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXhseGk=,size_20,color_FFFFFF,t_70,g_se,x_16)\n![img](https://img-blog.csdnimg.cn/2ab8c7fae2894781899ceac595beec6e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXhseGk=,size_20,color_FFFFFF,t_70,g_se,x_16)\n\n- ![image](https://github.com/qxlx/skill-tree/assets/36980092/df11e9cd-d3e5-4e49-93d8-4b72de63e0d2)\n![image](https://github.com/qxlx/skill-tree/assets/36980092/b86f37cf-5a9f-4d37-a4e7-cab9bd595395)\n\n## 微服务\n\n演进\n\n- 业务上演变->微服务(演进) 【进程内->进程间交互】\n  - a.链路过长、问题所在的定位\n  - b.机器问题  服务调用\n  - c.粒度问题 如何切  抉择\n- 难点\n  - 分布式锁、事务\n  - 开发以来下游，开发、测试沟通\n  - 运维挑战、容器云\n  - 性能问题 调度链路长 网络IO等\n\n## 分布式理论\n\nBASE\n\n- **Basic Availability**：基本可用。这意味着，系统可以出现暂时不可用的状态，而后面会快速恢复。\n- **Soft-state：**软状态。它是我们前面的“有状态”和“无状态”的服务的一种中间状态。也就是说，为了提高性能，我们可以让服务暂时保存一些状态或数据，这些状态和数据不是强一致性的。\n- **Eventual Consistency：**最终一致性，系统在一个短暂的时间段内是不一致的，但最终整个系统看到的数据是一致的。\n\nCAP\n\n- 一致性 (Consistency)  **强调的是各节点间的数据一致**\n- 可用性 (Availability)\n- 分区容错性 (Partition Tolerance)  **强调的是集群对分区故障的容错能力**\n\nACID\n\nACID的目的其实是为了保证数据的一致性，但是这种一致性是强一致性，在单机系统下可以很好的实现，但是放在分布式系统中，我们很难去权衡系统之间可用和数据的强一致性。而[分布式事务]需要通过二阶段提交协议和TCC（Try-Confirm-Cancel）实现。\n\n- 原子性（Atomicity）：整个事务操作过程中，要么是整体成功的，要么是整体失败的，不可能出现一半成功一半失败。如果出现异常的话，那么需要进行回滚到最原始的状态。举一个例子来说，比如我们在一个大事物中同时操作了订单和支付的表，那么当出现异常的情况，比如说三方异常或者是内部系统错误，事务会进行回滚到原始的状态。\n- 一致性(Consistency）: 在事务执行的前后，数据的完整性约束没有破坏。\n- 隔离性（Isolation）： 两个事务之间不会互相干扰，即一个事务A不会看到另一个事务B的中间数据。\n- 持久性（Durability）： 当事务完成之后，数据会被持久化到磁盘中，并且出现机器宕机等可以进行数据的恢复\n\n我们知道在分布式系统中不同的业务其实并不需要完全的数据一致性，大对数场景中，我们必须保证的是核心链路的稳定性、可用性，所以BASE其实就是CAP的一个变种。倾向于设计出一个更富有弹性能力的系统。\n在分布式系统中故障是不可避免的，当出现分区或者故障的时候，我们应该在设计层面多去考虑可能出现的问题，把故障处理当成功能写入代码中，即Design for Failure。新手与老手的差别就是新手可能会完整基本功能就可以了，但是老手会考虑很多边界问题，不和合法性以及可能出现的各种异常问题。\n举一个例子：比如买书，ACID的玩法是将库存锁住，不可能同时多个用户购买，而BASE的玩法是异步处理，可以支持用户抢购。\nACID是酸、BASE是碱，从本质上来说ACID的C强调的是一致性（CAP中C），而BASE强调的是可用性（CAP中A）\n关注点也不一样：ACID关注的是数据的完整性，而CAP的C关注的是分布式节点的数据一致性。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/eb065973d6d94c36a988d4cfcbd36f14.png)\n\nFLP\n\n- 很多人知道CAP、ACID、BASE 但是却不了解FLP，这里为了文章的完整性，介绍一下\n\n  FLP是分布式领域中非常著名的定理，在异步通讯场景中，即使只有一个进程失败，也没有任何算法能保证非失败进程达到一致性。\n\n  限定条件\n\n- 确定性协议：给定一个输入，一定会产生相同的输出。\n- 异步网络通讯：同步通信：同时在线，允许超时，异步通信，没有统一时钟，不能时间同步，不能使用超时，消息可任意延时，乱序。\n- 所有存活节点：所有存活的节点必须最终到达一致性。\n\n**ACID 是数据库事务完整性的理论，CAP 是分布式系统设计理论，BASE 是 CAP 理论中 AP 方案的延伸**\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/01f53a6786694d9480f4407be644fd41.png)\n\n两将军\n\n- 两将军问题，主要描述的是有两个军队A和B，分别驻扎在山谷的两侧，同时进攻城市。但是两个军队进攻时间是不确定的，也就是两边军队的Leader没有对发起进攻的时间形成一致。如果任意一方发起，另一方不发起进攻，那么就会失败。想要达成共识的办法就是通过发送信使的通知对方，但是中间的山谷被敌军占领。\n\n  假设军队Aleader指派了一名通讯兵去通知军队B 明天8点发起进攻，但是很可能这个通讯兵在中途被敌军擒获。如果没有擒获的话，军队Bleader为保证自己收到消息，需要给军队A发送消息，我已经收到了明天8点一起发起总攻。但是这个通讯兵在路上也可能被擒获。即使两边一次不停的发送也没有办法保证消息自己的通讯兵没有被擒获。所以这个问题是无解的。\n\n  说白了，在两将军问题中，信道是不可靠的，但是如果从工程角度解决的话，并不会去尝试解决信道不可靠问题，而是将这个不可靠降低到一个可接受的程度，三次握手机制其实是没有办法保证网络连接的可靠性，只是说在基于网络连接可靠的情况下，通过客户端和服务端的请求-相应-确认机制去确保连接建立成功。\n\n拜占庭将军\n\n- 拜占庭问题其实描述的是在拜占庭，周边有多个军队，想要一起进攻，必须每个军队就进攻/不进攻达成一致，但是再次基础上，军队中存在敌军间谍，会扰乱左右决策的过程，从而导致最终结果不一致。说白了拜占庭问题就是，在已知有敌军间谍的情况下，在忠勇将军的不受判读的影响下如何达成一致的协议。\n  拜占庭将军问题是两将军问题的升级版本，除了存在故障行为，还可能存在恶意行为。所以一般使用的话在数字货币的区块链技术中需要使用拜占庭容错算法。BFT。\n\n## 共识算法\n\n一致性与共识\n\n- 分布式共识就是在多个节点均可独自操作或记录的情况下，使得所有节点针对某个状态达成一致的过程。通过共识机制，我们可以使得[分布式系统]中的多个节点的数据达成一致。\n- **一致性强调的是结果，共识强调的是达成一致的过程**\n\nPaxos\n\nRaft\n\nZAB\n\nGossip\n\n## 分布式计算\n\n## 分布式存储\n\n分布式ID\n\n分片\n\n- **分片或者分区的本质是为了解决单机存储和性能瓶颈带来的问题，让分布式系统的计算和存储能力可以线性扩展。而数据复制解决的是数据的高可用**\n- 水平分片/ 垂直分片 / 混合分片\n- 算法：范围分片、哈希分片、一致性哈希分片、**基于虚拟节点的一致性哈希算法**\n\n复制\n\n- **为保证高可用，数据复制就会涉及到数据之间的拷贝，也就是数据一致性问题**\n- 单主复制（同步、异步、半异步复制）\n- 多主复制\n- 无主复制\n\n事务\n\n**CP+ACID=》刚性事务  适用于数据层** \n\n**AP+BASE=> 柔性食物  适用于业务层**\n\n- XA \n\n  - 2PC ：准备、提交\n\n  - 3PC：准备、预提交、提交\n\n- 业务补偿\n  - TCC\n  - sega\n- 最终一致性\n  - 消息表\n  - 消息队列\n  - 最大努力通知\n\n分布式锁\n\n- Redis\n- ZK\n- MySQL\n\n数据存储和检索\n\n- B+树 ：读多写少\n- LSM ：写多读少\n- 倒排索引&PageRank ：数据搜索\n\n## 高性能架构\n\n![img](https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/%E5%B7%A6%E8%80%B3%E5%90%AC%E9%A3%8E/assets/a9edeae125a80f381003d8d9d0056317.png)\n\n- 缓存\n\n  从客户端、CDN、网关、服务端、内存、数据库、文件系统、磁盘和CPU 都可以通过加缓存，来提高访问的速度。\n\n- 负载均衡\n\n  水平拓展的技术，通过将用户请求分发到不同的机器上来承担一部分用户流量\n\n- 异步调用\n\n  主要通过消息队列来实现，将前段的请求的峰值给肖平，后端按照自己的速度进行处理请求，增加系统的吞吐量，但是实时性就比较差。但是消息队列带来了消息丢失，重复消费，消息挤压等问题。\n\n- 数据分区/镜像\n\n  数据分区是通过将数据按照某种维度进行划分，比如地理上，请求最近的数据，但是join和跨库的事务操作复杂度比较高。而数据镜像则是通过将数据拷贝一份，然后任意节点上都可以读写，内部自行同步数据，最大问题就是数据一致性问题。\n\n  \n\n  缓存是提高读的性能，而异步调用是提高写的性能，负载均衡技术主要是通过服务冗余将流量进行分担，在分布式架构中，数据存储是一个重中之重，而一般要么就是使用镜像/复制技术，将数据进行拷贝，读写分离，另一种就是将数据分成多片，每片存储在不同服务器上，这样可以横行提高数据读写能力\n\n## 高可用架构\n\n![img](https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/%E5%B7%A6%E8%80%B3%E5%90%AC%E9%A3%8E/assets/befd21e1b41a257c5028f8c1bc7fa279.png)\n\n- 服务拆分\n\n  服务拆分的目的主要是两个，一是隔离故障，二是提高重用性。但是拆分后会引来服务之间依赖通信问题\n\n- 服务冗余\n\n  去除单点故障，支持服务的弹性伸缩，以及故障迁移。具体形式可能是主备、主从。\n\n- 限流降级\n\n  当系统是在扛不住压力的时候，需要通过限流或者降级的方式来保证核心业务的正常运转，属于技术保护的措施。\n\n  接口级别：限流、降级、排队、熔断、超时重试&幂等\n\n- 高可用架构\n\n  通常来说高可用架构是从冗余架构的角度来保证可用性，多租户隔离，容灾备份(异地多活/同城多机房、跨城多机房、跨国多机房)，或者数据可以在复制保持一致性的集群。\n\n  异地多活：同城多机房、跨城多机房、跨国数据中心\n\n  存储高可用：复制（主从、主备、主主）\n\n  计算高可用：负载均衡、任务分配、任务分解\n\n- 高可用运维\n\n  DevOps中的CI/CD（持续集成、持续部署）一个流程的软件发布流程，足够的自动化测试，相应的灰度发布，线上系统的自动化控制。\n\n## 分布式系统的纲\n\n![img](https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/%E5%B7%A6%E8%80%B3%E5%90%AC%E9%A3%8E/assets/8958a432f32dd742b6503b60f97cc3f2.png)\n\n\n\n- **服务治理**\n\n  服务拆分、服务调用、服务发现、服务依赖。关键在于对服务调用链路，依赖关系给梳理出来，并对这些服务进行性能和可用性方面的管理\n\n- **软件架构管理**\n\n  服务之间有依赖关系，有兼容性问题，所以整体服务所形成的架构需要有架构版本管理，整体架构的生命周期管理，以及对服务的编排，聚合，事务处理等服务调度功能\n\n- **DevOps**\n\n  分布式服务可以快读的部署，但是对测试和运维是一个挑战，包括环境构建、持续集成、持续部署等\n\n- **自动化运维**\n\n  对服务进行自动伸缩、故障迁移、配置管理、状态管理等一系列自动化运维技术了\n\n- **资源调度管理**\n\n  应用层的 计算 网络 存储\n\n- **整体架构监控**\n\n  监控是眼睛，需要对 应用层、中间件层、基础层进行监控\n\n- **流量控制**\n\n  负载均衡、服务路由、熔断、限流、降级都和流量相关的调度，以及灰度发布等。\n\n分布式五个关键技术\n\n- 全栈系统监控\n- 服务、资源调度\n- 流量调度\n- 状态、数据调度\n- 开发和运维的自动化\n\n## 可拓展架构\n\n分层\n\nSOA\n\n微服务\n\n微内核\n\n## 性能调优\n\n- 客户端-服务端 数据流走向  web->dns->nginx->tomcat->三方进程->DB\n\n性能指标\n\n- TPS、QPS、吞吐量\n\n架构设计\n\n- 缓存、异步、集群、分片、复制\n- 网络层面\n- 服务器硬件层面\n- 操作系统层面\n- JVM性能优化\n- 基础组件优化（MySQL、Kafka、Redis）\n- 软件架构层面优化\n- 软件代码优化\n\n如何优化\n\n- 三要三不要\n  - 三要\n    - 查询系统最大性能瓶颈\n    - 确诊问题根本原因\n    - 考虑多种情况\n  - 三不要\n    - 过度反常优化\n    - 过早不成熟优化\n    - 表面的肤浅优化\n- 十大策略\n  - 时空转换\n    - 空间换时间\n    - 时间换空间\n  - 并行/异步\n    - 并行操作\n    - 异步操作\n  - 预先/延后处理\n    - 预先/提前处理\n    - 延后/惰性处理\n  - 缓存/批量合并\n    - 缓存数据和结果\n    - 合并和批处理\n  - 算法设计和数据结构\n    - 更快的算法设计\n    - 更优化的数据结构\n- 线程池\n  - 数据库连接池\n  - Redis连接池\n  - 网络连接池\n  \n\n## 系统设计\n\n# 七.编程工具\n\n## git\n\n## idea\n\n## Maven\n\n## gradle\n\n# 八.云原生\n\n## CI/CD\n\n软件生命周期\n\nCI/CD\n\nJenkins\n\n## DevOps\n\n## docker\n\n基本组件\n\n- 镜像\n\n- 容器\n\n  - ds\n\n  - 为什么隔离\n\n    - 系统安全、资源隔离\n\n  - 虚拟机的区别\n\n    用虚拟机实现与宿主机的强隔离，然后在虚拟机里使用Docker容器来快速运行应用程序。\n\n    - |        | 实现方式                     | 优势                     | 劣势               |\n      | ------ | ---------------------------- | ------------------------ | ------------------ |\n      | 虚拟机 | 虚拟化硬件                   | 隔离程度非常高           | 资源消耗大，启动慢 |\n      | 容器   | 直接利用下层的硬件和操作系统 | 资源利用率高，运行速度快 | 隔离程度低         |\n\n      隔离实现原理\n\n      - namespace、cgroup、chroot\n\n- 仓库\n\n常用命令\n\n- docker version  //查看命令\n- docker run hello-world //运行hello world\n- systemctl stop docker  //停止\n- systemctl start docker  //启动\n- systemctl restart docker //重启\n\n容器数据卷\n\ncompose\n\ncontainer\n\nnetwork\n\nimage\n\nvolume\n\nswarm\n\n## k8s\n\n\n\n# 九.大数据\n  实时计算\n  离线计算\n\n## Hadoop\n\n## Spark\\Filnk\n\n# 十.其他领域\n\n## 区块链     \n\n# 终极篇-技术管理\n\n## 1.总体介绍\n\n技术的本质：技术是为了解决问题，技术解决问题的一种手段。\n\n三角：技术->业务->产品\n\n技术团队管理的本质 \n\n- 带好团队\n- 做好事\n- 团队文化\n\n管理思维｜技术思维\n\n- 系统性思维、利他思维、用户思维、trade-off思维\n\n技术管理的能力构成\n\n- 自我管理、商业思维、向上管理、产品思维、同级别管理、跨部门协作、数据思维、业务洞察力、技术敏感和架构决策、项目管理、\n\n## 2.思维方式篇\n\n闭环思维：事情有开始有结尾。\n\n- Plan->Do->Check->Act \n\n\n\n## 3.制度篇\n\n## 4.人才篇\n\n## 5.团队篇\n\n## 6.组织设计篇\n\n## 7.做事篇\n\n## 8.研发工具效率篇\n\n## 9.技术判断力与决策篇\n\n## 10.自我修养篇\n\n## 11.项目管理篇\n\n## 12.产品篇\n\n## 13.商业思维篇\n\n## 14.管理者能力认识篇\n\n## 15.数据思维篇\n\n# 面试\n\n工作中遇到的那些问题、难点 系统架构图         \n\n     操作系统\n       https://segmentfault.com/a/1190000039774784 从根上理解用户态与内核态\n\n\n\n**极客时间看完->读经典书籍**\n\n- \n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
--- a/README.md	(revision 9a52bfd732c35396e53c4a1020383304f8656d9c)
+++ b/README.md	(date 1702912929110)
@@ -25,8 +25,8 @@
 | Spring             | ✅✅✅  |
 | JVM                | ✅✅✅  |
 | 云原生             | ⭐️    |
-| 软件设计           |      |
-| 源码解析           |      |
+| 软件设计           | ⭐️    |
+| 源码解析           | ⭐️    |
 | 性能优化           | ⭐️    |
 | 算法               | ❎    |
 | Go、面试相关       |      |
@@ -797,6 +797,12 @@
 - CountDownLatch
 - CyclicBarrier
 - Semaphore
+  - AQS共享模式
+    - Semaphore的加锁解锁(共享锁)逻辑实现
+    - 线程竞争锁失败入队阻塞逻辑和获取锁的线程释放锁唤醒阻塞线程竞争锁的逻辑实现
+
+  - 限流使用
+
 - Future
 - CompletableFuture
   - 异步编程+回调
@@ -1234,7 +1240,7 @@
 
 集合
 
-- ArrsyList
+- ArrsyList 
 - LinkedList
 
 - hashmap   ✅
@@ -1244,22 +1250,22 @@
 
 线程池  ❌
 
-- ExecutorService
-- AbstractExecutorService
-- Executors
-- ScheduledThreadPoolExecutor
+- ExecutorService ✅
+- AbstractExecutorService ✅
+- Executors ✅
+- ScheduledThreadPoolExecutor 
 - 阻塞队列
-  - ArrayBlockingQueue
-  - LinkedBlockingQueue
-  - PriorityBlockingQueue
+  - ArrayBlockingQueue.   ✅
+  - LinkedBlockingQueue.  ✅
+  - PriorityBlockingQueue 
   - DelayQueue
   - LinkedTransferQueue
   - SynchronousQueue
 
 AQS
 
-- Synchroneized
-- ReentrantLock
+- Synchroneized. ✅
+- ReentrantLock. ✅
   - ReentrantReadWriteLock
 - Condition
 - CountDownLatch
Index: projcet.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>1.自研规则引擎  \n2.架构升级：单机->集群模式->负载均衡->服务拆分。  \n  读写分离, 分库分表\n  异步处理 \n3.流程性能优化，原来处理流程35S，优化到10S内 \n4.服务端进件流程优化。\n\n\n异步编程提升性能\n\n日志链路追加\n配置中心引入\n\n你遇到什么生产事故，如何排查解决的。\n\n- 慢SQL，导致CPU升高\n- 数据库连接池配置问题 导致吞吐量上不去\n- 线程池问题？\n- MQ\n\n\n\ntodo\n\n线程池原理 & 源码解析\n\n本周\n\n- [ ] Java编程之美  \n- [ ] 源码解析\n  - [ ] 并发\n  - [ ] Spring\n  - [ ] Kafka\n- [ ] 性能优化\n\n结合具体的项目经验\n\nhttps://articles.zsxq.com/id_izrmpuk43owr.html\n\nhttps://wx.zsxq.com/dweb2/index/topic_detail/185425252544152\n\n\n\n\n\n排查工具\n\nJVM(java 、Arthas、MAT、JDK)\n\n- OOM\n\nMySQL\n\n- 慢SQL\n- 连接池配置\n\n并发\n\n- 线程池\n\nRedis\n\nKafka\n\n- 消息延迟和堆积\n\n网络\n\n\n\nJVM+并发+Spring+MySQL+Redis+Kafka\n\n\n\n云原生、了解\n\n\n\n\n\n面试手写：\n\t单例模式，\n\t排序算法\n\t生产者和消费者\n\t死锁\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/projcet.md b/projcet.md
--- a/projcet.md	(revision 9a52bfd732c35396e53c4a1020383304f8656d9c)
+++ b/projcet.md	(date 1702912788606)
@@ -83,3 +83,34 @@
 	排序算法
 	生产者和消费者
 	死锁
+
+
+
+
+
+
+
+职责描述
+
+- 业务沟通与建模
+- 技术选型
+- 算法实现、环境搭建与机器部署
+- 架构设计、任务分配、数据库建模，JVM调优、SQL优化、linux问题解决与维护、改善公司数据的吞吐量
+
+项目
+
+- 技术架构、项目有什么地方可以改进、项目多大规模、多少人参与、其中是什么角色、负责的部分，数据量多大、并发量多大、JVM问题、数据的细节、字段、类设计、redis运用细节、项目心得、项目的难点
+- JVM调优+JUC+设计模式+Redis+ZK+MySQL调优+  架构
+- Netty + Spring源码
+
+
+
+- 说一个技术的时候，最好说一下应用场景
+
+
+
+JUC+MySQL调优+JVM
+
+
+
+ 
